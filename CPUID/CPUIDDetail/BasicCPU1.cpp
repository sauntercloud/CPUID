#include "stdafx.h"
#include "BasicCPU1.h"
CBasicCPU1::CBasicCPU1()
{
	int cpuinfo[4];
	__cpuidex(cpuinfo,1,0);
	
	_eax.w = cpuinfo[0];
	_ebx.w = cpuinfo[1];
	_ecx.w = cpuinfo[2];
	_edx.w = cpuinfo[3];

	if(0xf==_eax.CPU.FamilyID)
	{
		_famliy = _eax.CPU.FamilyID + _eax.CPU.ExtendedFamily;
		_model = (_eax.CPU.ExtendedModel<<4) | _eax.CPU.ModelID;
	}
	else if(0x6==_eax.CPU.FamilyID)
	{
		_famliy = _eax.CPU.FamilyID;
		_model = (_eax.CPU.ExtendedModel<<4) | _eax.CPU.ModelID;
	}
	else
	{
		_famliy = _eax.CPU.FamilyID;
		_model = _eax.CPU.ModelID;
	}

	char * szProcess[4] = {IDS_PROCESSOR_00B,IDS_PROCESSOR_01B,IDS_PROCESSOR_10B,IDS_PROCESSOR_11B};
	_processortype = szProcess[_eax.CPU.ProcessorType];

	char * szBrand[0x18] = {
		IDS_BRAND_INDEX_00H,IDS_BRAND_INDEX_01H,IDS_BRAND_INDEX_02H,IDS_BRAND_INDEX_03H,
		IDS_BRAND_INDEX_04H,IDS_BRAND_INDEX_05H,IDS_BRAND_INDEX_06H,IDS_BRAND_INDEX_07H,
		IDS_BRAND_INDEX_08H,IDS_BRAND_INDEX_09H,IDS_BRAND_INDEX_0AH,IDS_BRAND_INDEX_0BH,
		IDS_BRAND_INDEX_0CH,IDS_BRAND_INDEX_0DH,IDS_BRAND_INDEX_0EH,IDS_BRAND_INDEX_0FH,
		IDS_BRAND_INDEX_10H,IDS_BRAND_INDEX_11H,IDS_BRAND_INDEX_12H,IDS_BRAND_INDEX_13H,
		IDS_BRAND_INDEX_14H,IDS_BRAND_INDEX_15H,IDS_BRAND_INDEX_16H,IDS_BRAND_INDEX_17H
	};
	if(_ebx.bits.BrandIndex<0x18)_brandname = szBrand[_ebx.bits.BrandIndex];
}


int CBasicCPU1::steppingID()
{
	return _eax.CPU.SteppingID;
}
int CBasicCPU1::baseModelID()
{
	return _eax.CPU.ModelID;
}
int CBasicCPU1::baseFamilyID()
{
	return _eax.CPU.FamilyID;
}
int CBasicCPU1::modelID()
{
	return _model;
}
int CBasicCPU1::familyID()
{
	return _famliy;
}
string CBasicCPU1::processorTypeName()
{
	return _processortype;
}

string CBasicCPU1::brandName()
{
	return _brandname;
}
int CBasicCPU1::clflush()
{
	return _ebx.bits.CLFLUSHLineSize * 8;
}
int CBasicCPU1::logicalProcessors()
{
	return _ebx.bits.LogicalProcessors;
}
int CBasicCPU1::initialAPICID()
{
	return _ebx.bits.InitialAPICID;
}


DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,PNI,"SSE3 Extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,PCLMULQDQ,"Carryless Multiplication")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,DTES64,"64-bit Debug Store")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,MONITOR,"MONITOR/MWAIT")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,DSCPL,"CPL-qualified debug store")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,VMX,"Virtual Machine Extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,SMX,"Safer Mode Extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,EST,"Enhanced SpeedStep Technology")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,TM2,"Thermal Monitor 2 supported")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,SSSE3,"Supplemental SSE3")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,CID,"L1 Context ID")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,SDBG,"DEBUG_INTERFACE MSR for silicon debug")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,FMA,"Fused Multiply Add")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,CX16,"CMPXCHG16B Available")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,xTPR,"xTPR Update Control. Can disable sending Task Priority messages")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,PDCM,"Perf/Debug Capability MSR")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,PCID,"Process Context Identifiers")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,DCA,"Direct Cache Access")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,SSE4_1,"SSE4.1 Extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,SSE4_2,"SSE4.2 Extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,X2APIC,"Extended xAPIC Support")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,MOVBE,"MOVBE Instruction")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,POPCNT,"Pop Count Instruction")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,TSCD,"local APIC supports one-shot operation using TSC deadline value")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,AES,"AES Instruction")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,XSAVE,"XSAVE/XRSTOR！Extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,OSXSAVE,"XSAVE/XRSTOR！Enabled in the OS")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,AVX,"AVX！Advanced Vector Extension")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,F16C,"half-precision convert instruction support")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_ecx,RDRAND,"RDRAND！Read Random Number")


DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,FPU,"Floating-point unit on-chip")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,VME,"Virtual Mode Enhancements")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,DE,"Debugging extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PSE,"Page Size extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,TSC,"TimeStamp Counter")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,MSR,"Model Specific Registers RDMSR and WRMSR Instructions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PAE,"Physical Address Extension")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,MCE,"Machine Check Exception")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,CX8,"CMPXCHG8B Instruction Supported")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,APIC,"APIC(Advanced Programmable Interrupt Controller) On-Chip")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,SEP,"Fast System Call instructions, SYSENTER and SYSEXIT")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,MTRR,"Memory Type Range Registers")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PGE,"Page Global Enable")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,MCA,"Machine Check Architecture")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,CMOV,"Conditional move/compare instruction")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PAT,"Page attribute table")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PSE36,"Page Size Extension 36-bit")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PSN,"Processor serial number")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,CLFSH,"CFLUSH instruction")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,DS,"Debug Store")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,ACPI,"Thermal Monitor and Clock Ctrl")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,MMX,"MMX instructions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,FXSR,"FXSAVE/FXRSTOR instructions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,SSE,"SSE extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,SSE2,"SSE2 extensions")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,SS,"Self-Snoop")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,HTT,"Hyperthreading")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,TM,"Thermal Monitor")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,IA64,"IA-64 Processor")
DEFINE_SUPPORT_FUNCTION_IMPLEMENT(_edx,PBE,"Pending Break Enable")


string CBasicCPU1::dump()
{
#define DEFINE_SUPPORT_FUNCTION_DUMP(FUNCTION) \
	oss << "[" << isSupport##FUNCTION() << "]\t" << desc##FUNCTION() << endl;
	ostringstream oss;
	oss << "base family:\t" << hex << baseFamilyID() << endl;
	oss << "base model:\t" << baseModelID() << endl;
	oss << "ext family:\t" << familyID() << endl;
	oss << "ext model:\t" << modelID() << endl;
	oss << "ext stepping:\t" << steppingID() << endl;
	oss << "cpu type:\t" << processorTypeName() << endl;
	oss << "cpu brand:\t" << brandName() << endl;
	oss << "clflush line size:\t" << clflush() << endl;
	oss << "init APICID:\t" << initialAPICID() << endl;

	oss << "cpu support:               \t"  << endl;

	//ecx
	DEFINE_SUPPORT_FUNCTION_DUMP(PNI)
	DEFINE_SUPPORT_FUNCTION_DUMP(PCLMULQDQ)
	DEFINE_SUPPORT_FUNCTION_DUMP(DTES64)
	DEFINE_SUPPORT_FUNCTION_DUMP(MONITOR)
	DEFINE_SUPPORT_FUNCTION_DUMP(DSCPL)
	DEFINE_SUPPORT_FUNCTION_DUMP(VMX)
	DEFINE_SUPPORT_FUNCTION_DUMP(SMX)
	DEFINE_SUPPORT_FUNCTION_DUMP(EST)
	DEFINE_SUPPORT_FUNCTION_DUMP(TM2)
	DEFINE_SUPPORT_FUNCTION_DUMP(SSSE3)
	DEFINE_SUPPORT_FUNCTION_DUMP(CID)
	DEFINE_SUPPORT_FUNCTION_DUMP(SDBG)
	DEFINE_SUPPORT_FUNCTION_DUMP(FMA)
	DEFINE_SUPPORT_FUNCTION_DUMP(CX16)
	DEFINE_SUPPORT_FUNCTION_DUMP(xTPR)
	DEFINE_SUPPORT_FUNCTION_DUMP(PDCM)
	DEFINE_SUPPORT_FUNCTION_DUMP(PCID)
	DEFINE_SUPPORT_FUNCTION_DUMP(DCA)
	DEFINE_SUPPORT_FUNCTION_DUMP(SSE4_1)
	DEFINE_SUPPORT_FUNCTION_DUMP(SSE4_2)
	DEFINE_SUPPORT_FUNCTION_DUMP(X2APIC)
	DEFINE_SUPPORT_FUNCTION_DUMP(MOVBE)
	DEFINE_SUPPORT_FUNCTION_DUMP(POPCNT)
	DEFINE_SUPPORT_FUNCTION_DUMP(TSCD)
	DEFINE_SUPPORT_FUNCTION_DUMP(AES)
	DEFINE_SUPPORT_FUNCTION_DUMP(XSAVE)
	DEFINE_SUPPORT_FUNCTION_DUMP(OSXSAVE)
	DEFINE_SUPPORT_FUNCTION_DUMP(AVX)
	DEFINE_SUPPORT_FUNCTION_DUMP(F16C)
	DEFINE_SUPPORT_FUNCTION_DUMP(RDRAND)

	//edx
	DEFINE_SUPPORT_FUNCTION_DUMP(FPU)
	DEFINE_SUPPORT_FUNCTION_DUMP(VME)
	DEFINE_SUPPORT_FUNCTION_DUMP(DE)
	DEFINE_SUPPORT_FUNCTION_DUMP(PSE)
	DEFINE_SUPPORT_FUNCTION_DUMP(TSC)
	DEFINE_SUPPORT_FUNCTION_DUMP(MSR)
	DEFINE_SUPPORT_FUNCTION_DUMP(PAE)
	DEFINE_SUPPORT_FUNCTION_DUMP(MCE)
	DEFINE_SUPPORT_FUNCTION_DUMP(CX8)
	DEFINE_SUPPORT_FUNCTION_DUMP(APIC)
	DEFINE_SUPPORT_FUNCTION_DUMP(SEP)
	DEFINE_SUPPORT_FUNCTION_DUMP(MTRR)
	DEFINE_SUPPORT_FUNCTION_DUMP(PGE)
	DEFINE_SUPPORT_FUNCTION_DUMP(MCA)
	DEFINE_SUPPORT_FUNCTION_DUMP(CMOV)
	DEFINE_SUPPORT_FUNCTION_DUMP(PAT)
	DEFINE_SUPPORT_FUNCTION_DUMP(PSE36)
	DEFINE_SUPPORT_FUNCTION_DUMP(PSN)
	DEFINE_SUPPORT_FUNCTION_DUMP(CLFSH)
	DEFINE_SUPPORT_FUNCTION_DUMP(DS)
	DEFINE_SUPPORT_FUNCTION_DUMP(ACPI)
	DEFINE_SUPPORT_FUNCTION_DUMP(MMX)
	DEFINE_SUPPORT_FUNCTION_DUMP(FXSR)
	DEFINE_SUPPORT_FUNCTION_DUMP(SSE)
	DEFINE_SUPPORT_FUNCTION_DUMP(SSE2)
	DEFINE_SUPPORT_FUNCTION_DUMP(SS)
	DEFINE_SUPPORT_FUNCTION_DUMP(HTT)
	DEFINE_SUPPORT_FUNCTION_DUMP(TM)
	DEFINE_SUPPORT_FUNCTION_DUMP(IA64)
	DEFINE_SUPPORT_FUNCTION_DUMP(PBE)

	return oss.str();
}